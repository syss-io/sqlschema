// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: mysql.proto

package sql_schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MySQLServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string                           `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Configurations []*MySQLServerInfo_Configuration `protobuf:"bytes,3,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (x *MySQLServerInfo) Reset() {
	*x = MySQLServerInfo{}
	mi := &file_mysql_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLServerInfo) ProtoMessage() {}

func (x *MySQLServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLServerInfo.ProtoReflect.Descriptor instead.
func (*MySQLServerInfo) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{0}
}

func (x *MySQLServerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MySQLServerInfo) GetConfigurations() []*MySQLServerInfo_Configuration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type MySQLDatabaseDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName     string                             `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Tables           []*MySQLTableDefinition            `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	Functions        []*MySQLFunctionDefinition         `protobuf:"bytes,3,rep,name=functions,proto3" json:"functions,omitempty"`
	StoredProcedures []*MySQLStoredProceduresDefinition `protobuf:"bytes,4,rep,name=stored_procedures,json=storedProcedures,proto3" json:"stored_procedures,omitempty"`
	Triggers         []*MySQLTriggerDefinition          `protobuf:"bytes,5,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Views            []*MySQLViewDefinition             `protobuf:"bytes,6,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *MySQLDatabaseDefinition) Reset() {
	*x = MySQLDatabaseDefinition{}
	mi := &file_mysql_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLDatabaseDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLDatabaseDefinition) ProtoMessage() {}

func (x *MySQLDatabaseDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLDatabaseDefinition.ProtoReflect.Descriptor instead.
func (*MySQLDatabaseDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{1}
}

func (x *MySQLDatabaseDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLDatabaseDefinition) GetTables() []*MySQLTableDefinition {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *MySQLDatabaseDefinition) GetFunctions() []*MySQLFunctionDefinition {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *MySQLDatabaseDefinition) GetStoredProcedures() []*MySQLStoredProceduresDefinition {
	if x != nil {
		return x.StoredProcedures
	}
	return nil
}

func (x *MySQLDatabaseDefinition) GetTriggers() []*MySQLTriggerDefinition {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *MySQLDatabaseDefinition) GetViews() []*MySQLViewDefinition {
	if x != nil {
		return x.Views
	}
	return nil
}

type MySQLTriggerDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName      string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName         string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TriggerName       string `protobuf:"bytes,3,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	EventManipulation string `protobuf:"bytes,4,opt,name=event_manipulation,json=eventManipulation,proto3" json:"event_manipulation,omitempty"`
	ActionTiming      string `protobuf:"bytes,5,opt,name=action_timing,json=actionTiming,proto3" json:"action_timing,omitempty"`
	ActionOrientation string `protobuf:"bytes,6,opt,name=action_orientation,json=actionOrientation,proto3" json:"action_orientation,omitempty"`
	ActionStatement   string `protobuf:"bytes,7,opt,name=action_statement,json=actionStatement,proto3" json:"action_statement,omitempty"`
}

func (x *MySQLTriggerDefinition) Reset() {
	*x = MySQLTriggerDefinition{}
	mi := &file_mysql_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLTriggerDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLTriggerDefinition) ProtoMessage() {}

func (x *MySQLTriggerDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLTriggerDefinition.ProtoReflect.Descriptor instead.
func (*MySQLTriggerDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{2}
}

func (x *MySQLTriggerDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLTriggerDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *MySQLTriggerDefinition) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *MySQLTriggerDefinition) GetEventManipulation() string {
	if x != nil {
		return x.EventManipulation
	}
	return ""
}

func (x *MySQLTriggerDefinition) GetActionTiming() string {
	if x != nil {
		return x.ActionTiming
	}
	return ""
}

func (x *MySQLTriggerDefinition) GetActionOrientation() string {
	if x != nil {
		return x.ActionOrientation
	}
	return ""
}

func (x *MySQLTriggerDefinition) GetActionStatement() string {
	if x != nil {
		return x.ActionStatement
	}
	return ""
}

type MySQLFunctionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	FunctionName string `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	ReturnType   string `protobuf:"bytes,3,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	DataType     string `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	Definition   string `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
	Language     string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	Comment      string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *MySQLFunctionDefinition) Reset() {
	*x = MySQLFunctionDefinition{}
	mi := &file_mysql_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLFunctionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLFunctionDefinition) ProtoMessage() {}

func (x *MySQLFunctionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLFunctionDefinition.ProtoReflect.Descriptor instead.
func (*MySQLFunctionDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{3}
}

func (x *MySQLFunctionDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLFunctionDefinition) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *MySQLFunctionDefinition) GetReturnType() string {
	if x != nil {
		return x.ReturnType
	}
	return ""
}

func (x *MySQLFunctionDefinition) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *MySQLFunctionDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *MySQLFunctionDefinition) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *MySQLFunctionDefinition) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type MySQLStoredProceduresDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName  string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	ProcedureName string `protobuf:"bytes,2,opt,name=procedure_name,json=procedureName,proto3" json:"procedure_name,omitempty"`
	Definition    string `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Language      string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Comment       string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *MySQLStoredProceduresDefinition) Reset() {
	*x = MySQLStoredProceduresDefinition{}
	mi := &file_mysql_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLStoredProceduresDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLStoredProceduresDefinition) ProtoMessage() {}

func (x *MySQLStoredProceduresDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLStoredProceduresDefinition.ProtoReflect.Descriptor instead.
func (*MySQLStoredProceduresDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{4}
}

func (x *MySQLStoredProceduresDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLStoredProceduresDefinition) GetProcedureName() string {
	if x != nil {
		return x.ProcedureName
	}
	return ""
}

func (x *MySQLStoredProceduresDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *MySQLStoredProceduresDefinition) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *MySQLStoredProceduresDefinition) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type MySQLForeignKeyDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName      string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName         string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	ColumnName        string `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ForeignTableName  string `protobuf:"bytes,4,opt,name=foreign_table_name,json=foreignTableName,proto3" json:"foreign_table_name,omitempty"`
	ForeignColumnName string `protobuf:"bytes,5,opt,name=foreign_column_name,json=foreignColumnName,proto3" json:"foreign_column_name,omitempty"`
	ConstraintName    string `protobuf:"bytes,6,opt,name=constraint_name,json=constraintName,proto3" json:"constraint_name,omitempty"`
	OnUpdate          string `protobuf:"bytes,7,opt,name=on_update,json=onUpdate,proto3" json:"on_update,omitempty"`
	OnDelete          string `protobuf:"bytes,8,opt,name=on_delete,json=onDelete,proto3" json:"on_delete,omitempty"`
}

func (x *MySQLForeignKeyDefinition) Reset() {
	*x = MySQLForeignKeyDefinition{}
	mi := &file_mysql_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLForeignKeyDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLForeignKeyDefinition) ProtoMessage() {}

func (x *MySQLForeignKeyDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLForeignKeyDefinition.ProtoReflect.Descriptor instead.
func (*MySQLForeignKeyDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{5}
}

func (x *MySQLForeignKeyDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLForeignKeyDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *MySQLForeignKeyDefinition) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *MySQLForeignKeyDefinition) GetForeignTableName() string {
	if x != nil {
		return x.ForeignTableName
	}
	return ""
}

func (x *MySQLForeignKeyDefinition) GetForeignColumnName() string {
	if x != nil {
		return x.ForeignColumnName
	}
	return ""
}

func (x *MySQLForeignKeyDefinition) GetConstraintName() string {
	if x != nil {
		return x.ConstraintName
	}
	return ""
}

func (x *MySQLForeignKeyDefinition) GetOnUpdate() string {
	if x != nil {
		return x.OnUpdate
	}
	return ""
}

func (x *MySQLForeignKeyDefinition) GetOnDelete() string {
	if x != nil {
		return x.OnDelete
	}
	return ""
}

type MySQLIndexDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName   string   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName      string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	IndexName      string   `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	ColumnNames    []string `protobuf:"bytes,4,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	Algorithm      string   `protobuf:"bytes,5,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	ConstraintType string   `protobuf:"bytes,6,opt,name=constraint_type,json=constraintType,proto3" json:"constraint_type,omitempty"`
	IsUnique       bool     `protobuf:"varint,7,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	IsPrimary      bool     `protobuf:"varint,8,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsPartial      bool     `protobuf:"varint,9,opt,name=is_partial,json=isPartial,proto3" json:"is_partial,omitempty"`
	Comment        *string  `protobuf:"bytes,10,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *MySQLIndexDefinition) Reset() {
	*x = MySQLIndexDefinition{}
	mi := &file_mysql_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLIndexDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLIndexDefinition) ProtoMessage() {}

func (x *MySQLIndexDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLIndexDefinition.ProtoReflect.Descriptor instead.
func (*MySQLIndexDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{6}
}

func (x *MySQLIndexDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLIndexDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *MySQLIndexDefinition) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *MySQLIndexDefinition) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *MySQLIndexDefinition) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *MySQLIndexDefinition) GetConstraintType() string {
	if x != nil {
		return x.ConstraintType
	}
	return ""
}

func (x *MySQLIndexDefinition) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *MySQLIndexDefinition) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *MySQLIndexDefinition) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

func (x *MySQLIndexDefinition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type MySQLColumnDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    string                       `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Name         string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         string                       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	IsNullable   bool                         `protobuf:"varint,4,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	DefaultValue string                       `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Charset      string                       `protobuf:"bytes,6,opt,name=charset,proto3" json:"charset,omitempty"`
	Collation    string                       `protobuf:"bytes,7,opt,name=collation,proto3" json:"collation,omitempty"`
	Extra        string                       `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`
	Comment      string                       `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	ForeignKeys  []*MySQLForeignKeyDefinition `protobuf:"bytes,10,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	Indexes      []*MySQLIndexDefinition      `protobuf:"bytes,11,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *MySQLColumnDefinition) Reset() {
	*x = MySQLColumnDefinition{}
	mi := &file_mysql_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLColumnDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLColumnDefinition) ProtoMessage() {}

func (x *MySQLColumnDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLColumnDefinition.ProtoReflect.Descriptor instead.
func (*MySQLColumnDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{7}
}

func (x *MySQLColumnDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *MySQLColumnDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MySQLColumnDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MySQLColumnDefinition) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *MySQLColumnDefinition) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *MySQLColumnDefinition) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *MySQLColumnDefinition) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *MySQLColumnDefinition) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *MySQLColumnDefinition) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MySQLColumnDefinition) GetForeignKeys() []*MySQLForeignKeyDefinition {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *MySQLColumnDefinition) GetIndexes() []*MySQLIndexDefinition {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type MySQLViewDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName string                   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	ViewName     string                   `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	Definition   string                   `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Columns      []*MySQLColumnDefinition `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	IsUpdatable  bool                     `protobuf:"varint,5,opt,name=is_updatable,json=isUpdatable,proto3" json:"is_updatable,omitempty"`
}

func (x *MySQLViewDefinition) Reset() {
	*x = MySQLViewDefinition{}
	mi := &file_mysql_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLViewDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLViewDefinition) ProtoMessage() {}

func (x *MySQLViewDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLViewDefinition.ProtoReflect.Descriptor instead.
func (*MySQLViewDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{8}
}

func (x *MySQLViewDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLViewDefinition) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *MySQLViewDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *MySQLViewDefinition) GetColumns() []*MySQLColumnDefinition {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *MySQLViewDefinition) GetIsUpdatable() bool {
	if x != nil {
		return x.IsUpdatable
	}
	return false
}

type MySQLTableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName     string                             `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName        string                             `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Columns          []*MySQLColumnDefinition           `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	Indexes          []*MySQLIndexDefinition            `protobuf:"bytes,4,rep,name=indexes,proto3" json:"indexes,omitempty"`
	ForeignKeys      []*MySQLForeignKeyDefinition       `protobuf:"bytes,5,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	Triggers         []*MySQLTriggerDefinition          `protobuf:"bytes,6,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Functions        []*MySQLFunctionDefinition         `protobuf:"bytes,7,rep,name=functions,proto3" json:"functions,omitempty"`
	StoredProcedures []*MySQLStoredProceduresDefinition `protobuf:"bytes,8,rep,name=stored_procedures,json=storedProcedures,proto3" json:"stored_procedures,omitempty"`
	Views            []*MySQLViewDefinition             `protobuf:"bytes,9,rep,name=views,proto3" json:"views,omitempty"`
	Comment          string                             `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *MySQLTableDefinition) Reset() {
	*x = MySQLTableDefinition{}
	mi := &file_mysql_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLTableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLTableDefinition) ProtoMessage() {}

func (x *MySQLTableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLTableDefinition.ProtoReflect.Descriptor instead.
func (*MySQLTableDefinition) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{9}
}

func (x *MySQLTableDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MySQLTableDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *MySQLTableDefinition) GetColumns() []*MySQLColumnDefinition {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *MySQLTableDefinition) GetIndexes() []*MySQLIndexDefinition {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *MySQLTableDefinition) GetForeignKeys() []*MySQLForeignKeyDefinition {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *MySQLTableDefinition) GetTriggers() []*MySQLTriggerDefinition {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *MySQLTableDefinition) GetFunctions() []*MySQLFunctionDefinition {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *MySQLTableDefinition) GetStoredProcedures() []*MySQLStoredProceduresDefinition {
	if x != nil {
		return x.StoredProcedures
	}
	return nil
}

func (x *MySQLTableDefinition) GetViews() []*MySQLViewDefinition {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *MySQLTableDefinition) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type MySQLServerInfo_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MySQLServerInfo_Configuration) Reset() {
	*x = MySQLServerInfo_Configuration{}
	mi := &file_mysql_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MySQLServerInfo_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQLServerInfo_Configuration) ProtoMessage() {}

func (x *MySQLServerInfo_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_mysql_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQLServerInfo_Configuration.ProtoReflect.Descriptor instead.
func (*MySQLServerInfo_Configuration) Descriptor() ([]byte, []int) {
	return file_mysql_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MySQLServerInfo_Configuration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MySQLServerInfo_Configuration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_mysql_proto protoreflect.FileDescriptor

var file_mysql_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73,
	0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x17, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e,
	0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5f, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x79, 0x73,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x17, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xc3, 0x01, 0x0a, 0x1f, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x14, 0x4d, 0x79,
	0x53, 0x51, 0x4c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa0, 0x03, 0x0a, 0x15, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x79, 0x73,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xfc, 0x04, 0x0a, 0x14, 0x4d, 0x79,
	0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73,
	0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79,
	0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x79, 0x53, 0x51, 0x4c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x45,
	0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e,
	0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53,
	0x51, 0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5f, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x79, 0x73,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x79, 0x53, 0x51, 0x4c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x79, 0x73, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x73,
	0x71, 0x6c, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mysql_proto_rawDescOnce sync.Once
	file_mysql_proto_rawDescData = file_mysql_proto_rawDesc
)

func file_mysql_proto_rawDescGZIP() []byte {
	file_mysql_proto_rawDescOnce.Do(func() {
		file_mysql_proto_rawDescData = protoimpl.X.CompressGZIP(file_mysql_proto_rawDescData)
	})
	return file_mysql_proto_rawDescData
}

var file_mysql_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_mysql_proto_goTypes = []any{
	(*MySQLServerInfo)(nil),                 // 0: syss.sqlschema.v1.MySQLServerInfo
	(*MySQLDatabaseDefinition)(nil),         // 1: syss.sqlschema.v1.MySQLDatabaseDefinition
	(*MySQLTriggerDefinition)(nil),          // 2: syss.sqlschema.v1.MySQLTriggerDefinition
	(*MySQLFunctionDefinition)(nil),         // 3: syss.sqlschema.v1.MySQLFunctionDefinition
	(*MySQLStoredProceduresDefinition)(nil), // 4: syss.sqlschema.v1.MySQLStoredProceduresDefinition
	(*MySQLForeignKeyDefinition)(nil),       // 5: syss.sqlschema.v1.MySQLForeignKeyDefinition
	(*MySQLIndexDefinition)(nil),            // 6: syss.sqlschema.v1.MySQLIndexDefinition
	(*MySQLColumnDefinition)(nil),           // 7: syss.sqlschema.v1.MySQLColumnDefinition
	(*MySQLViewDefinition)(nil),             // 8: syss.sqlschema.v1.MySQLViewDefinition
	(*MySQLTableDefinition)(nil),            // 9: syss.sqlschema.v1.MySQLTableDefinition
	(*MySQLServerInfo_Configuration)(nil),   // 10: syss.sqlschema.v1.MySQLServerInfo.Configuration
}
var file_mysql_proto_depIdxs = []int32{
	10, // 0: syss.sqlschema.v1.MySQLServerInfo.configurations:type_name -> syss.sqlschema.v1.MySQLServerInfo.Configuration
	9,  // 1: syss.sqlschema.v1.MySQLDatabaseDefinition.tables:type_name -> syss.sqlschema.v1.MySQLTableDefinition
	3,  // 2: syss.sqlschema.v1.MySQLDatabaseDefinition.functions:type_name -> syss.sqlschema.v1.MySQLFunctionDefinition
	4,  // 3: syss.sqlschema.v1.MySQLDatabaseDefinition.stored_procedures:type_name -> syss.sqlschema.v1.MySQLStoredProceduresDefinition
	2,  // 4: syss.sqlschema.v1.MySQLDatabaseDefinition.triggers:type_name -> syss.sqlschema.v1.MySQLTriggerDefinition
	8,  // 5: syss.sqlschema.v1.MySQLDatabaseDefinition.views:type_name -> syss.sqlschema.v1.MySQLViewDefinition
	5,  // 6: syss.sqlschema.v1.MySQLColumnDefinition.foreign_keys:type_name -> syss.sqlschema.v1.MySQLForeignKeyDefinition
	6,  // 7: syss.sqlschema.v1.MySQLColumnDefinition.indexes:type_name -> syss.sqlschema.v1.MySQLIndexDefinition
	7,  // 8: syss.sqlschema.v1.MySQLViewDefinition.columns:type_name -> syss.sqlschema.v1.MySQLColumnDefinition
	7,  // 9: syss.sqlschema.v1.MySQLTableDefinition.columns:type_name -> syss.sqlschema.v1.MySQLColumnDefinition
	6,  // 10: syss.sqlschema.v1.MySQLTableDefinition.indexes:type_name -> syss.sqlschema.v1.MySQLIndexDefinition
	5,  // 11: syss.sqlschema.v1.MySQLTableDefinition.foreign_keys:type_name -> syss.sqlschema.v1.MySQLForeignKeyDefinition
	2,  // 12: syss.sqlschema.v1.MySQLTableDefinition.triggers:type_name -> syss.sqlschema.v1.MySQLTriggerDefinition
	3,  // 13: syss.sqlschema.v1.MySQLTableDefinition.functions:type_name -> syss.sqlschema.v1.MySQLFunctionDefinition
	4,  // 14: syss.sqlschema.v1.MySQLTableDefinition.stored_procedures:type_name -> syss.sqlschema.v1.MySQLStoredProceduresDefinition
	8,  // 15: syss.sqlschema.v1.MySQLTableDefinition.views:type_name -> syss.sqlschema.v1.MySQLViewDefinition
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_mysql_proto_init() }
func file_mysql_proto_init() {
	if File_mysql_proto != nil {
		return
	}
	file_mysql_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mysql_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mysql_proto_goTypes,
		DependencyIndexes: file_mysql_proto_depIdxs,
		MessageInfos:      file_mysql_proto_msgTypes,
	}.Build()
	File_mysql_proto = out.File
	file_mysql_proto_rawDesc = nil
	file_mysql_proto_goTypes = nil
	file_mysql_proto_depIdxs = nil
}
