// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: postgres.proto

package sqlschema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostgreSQLServerInfo struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	VersionFull    string                                `protobuf:"bytes,1,opt,name=version_full,json=versionFull,proto3" json:"version_full,omitempty"`
	VersionNumber  int32                                 `protobuf:"varint,2,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	Configurations []*PostgreSQLServerInfo_Configuration `protobuf:"bytes,3,rep,name=configurations,proto3" json:"configurations,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PostgreSQLServerInfo) Reset() {
	*x = PostgreSQLServerInfo{}
	mi := &file_postgres_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLServerInfo) ProtoMessage() {}

func (x *PostgreSQLServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLServerInfo.ProtoReflect.Descriptor instead.
func (*PostgreSQLServerInfo) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{0}
}

func (x *PostgreSQLServerInfo) GetVersionFull() string {
	if x != nil {
		return x.VersionFull
	}
	return ""
}

func (x *PostgreSQLServerInfo) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

func (x *PostgreSQLServerInfo) GetConfigurations() []*PostgreSQLServerInfo_Configuration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type PostgreSQLDatabase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schemas       []*PostgreSQLSchema    `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLDatabase) Reset() {
	*x = PostgreSQLDatabase{}
	mi := &file_postgres_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLDatabase) ProtoMessage() {}

func (x *PostgreSQLDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLDatabase.ProtoReflect.Descriptor instead.
func (*PostgreSQLDatabase) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{1}
}

func (x *PostgreSQLDatabase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgreSQLDatabase) GetSchemas() []*PostgreSQLSchema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type PostgreSQLSchema struct {
	state             protoimpl.MessageState        `protogen:"open.v1"`
	SchemaName        string                        `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	DatabaseName      string                        `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Tables            []*PostgreSQLTable            `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
	Functions         []*PostgreSQLFunction         `protobuf:"bytes,4,rep,name=functions,proto3" json:"functions,omitempty"`
	Procedures        []*PostgreSQLProcedure        `protobuf:"bytes,5,rep,name=procedures,proto3" json:"procedures,omitempty"`
	Views             []*PostgreSQLView             `protobuf:"bytes,6,rep,name=views,proto3" json:"views,omitempty"`
	MaterializedViews []*PostgreSQLMaterializedView `protobuf:"bytes,7,rep,name=materialized_views,json=materializedViews,proto3" json:"materialized_views,omitempty"`
	Comment           *string                       `protobuf:"bytes,8,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PostgreSQLSchema) Reset() {
	*x = PostgreSQLSchema{}
	mi := &file_postgres_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLSchema) ProtoMessage() {}

func (x *PostgreSQLSchema) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLSchema.ProtoReflect.Descriptor instead.
func (*PostgreSQLSchema) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{2}
}

func (x *PostgreSQLSchema) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLSchema) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PostgreSQLSchema) GetTables() []*PostgreSQLTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *PostgreSQLSchema) GetFunctions() []*PostgreSQLFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *PostgreSQLSchema) GetProcedures() []*PostgreSQLProcedure {
	if x != nil {
		return x.Procedures
	}
	return nil
}

func (x *PostgreSQLSchema) GetViews() []*PostgreSQLView {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *PostgreSQLSchema) GetMaterializedViews() []*PostgreSQLMaterializedView {
	if x != nil {
		return x.MaterializedViews
	}
	return nil
}

func (x *PostgreSQLSchema) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgreSQLTable struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	SchemaName    string                  `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName     string                  `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Columns       []*PostgreSQLColumn     `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	ForeignKeys   []*PostgreSQLForeignKey `protobuf:"bytes,4,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	Indexes       []*PostgreSQLIndex      `protobuf:"bytes,5,rep,name=indexes,proto3" json:"indexes,omitempty"`
	Triggers      []*PostgreSQLTrigger    `protobuf:"bytes,6,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Comment       *string                 `protobuf:"bytes,7,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLTable) Reset() {
	*x = PostgreSQLTable{}
	mi := &file_postgres_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLTable) ProtoMessage() {}

func (x *PostgreSQLTable) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLTable.ProtoReflect.Descriptor instead.
func (*PostgreSQLTable) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{3}
}

func (x *PostgreSQLTable) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLTable) GetColumns() []*PostgreSQLColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PostgreSQLTable) GetForeignKeys() []*PostgreSQLForeignKey {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *PostgreSQLTable) GetIndexes() []*PostgreSQLIndex {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *PostgreSQLTable) GetTriggers() []*PostgreSQLTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *PostgreSQLTable) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgreSQLColumn struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	SchemaName             string                  `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName              string                  `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	ColumnName             string                  `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	DataType               string                  `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	IsNullable             bool                    `protobuf:"varint,5,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	DefaultValue           *string                 `protobuf:"bytes,6,opt,name=default_value,json=defaultValue,proto3,oneof" json:"default_value,omitempty"`
	IsPrimary              bool                    `protobuf:"varint,7,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsUnique               bool                    `protobuf:"varint,8,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	IsAutoincrement        bool                    `protobuf:"varint,9,opt,name=is_autoincrement,json=isAutoincrement,proto3" json:"is_autoincrement,omitempty"`
	CharacterMaximumLength *int64                  `protobuf:"varint,10,opt,name=character_maximum_length,json=characterMaximumLength,proto3,oneof" json:"character_maximum_length,omitempty"`
	Comment                *string                 `protobuf:"bytes,11,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	ForeignKeys            []*PostgreSQLForeignKey `protobuf:"bytes,12,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	Indexes                []*PostgreSQLIndex      `protobuf:"bytes,13,rep,name=indexes,proto3" json:"indexes,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PostgreSQLColumn) Reset() {
	*x = PostgreSQLColumn{}
	mi := &file_postgres_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLColumn) ProtoMessage() {}

func (x *PostgreSQLColumn) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLColumn.ProtoReflect.Descriptor instead.
func (*PostgreSQLColumn) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{4}
}

func (x *PostgreSQLColumn) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLColumn) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLColumn) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *PostgreSQLColumn) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *PostgreSQLColumn) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *PostgreSQLColumn) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *PostgreSQLColumn) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *PostgreSQLColumn) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *PostgreSQLColumn) GetIsAutoincrement() bool {
	if x != nil {
		return x.IsAutoincrement
	}
	return false
}

func (x *PostgreSQLColumn) GetCharacterMaximumLength() int64 {
	if x != nil && x.CharacterMaximumLength != nil {
		return *x.CharacterMaximumLength
	}
	return 0
}

func (x *PostgreSQLColumn) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *PostgreSQLColumn) GetForeignKeys() []*PostgreSQLForeignKey {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *PostgreSQLColumn) GetIndexes() []*PostgreSQLIndex {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type PostgreSQLForeignKey struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SchemaName          string                 `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName           string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	ColumnName          string                 `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ForeignTableName    string                 `protobuf:"bytes,4,opt,name=foreign_table_name,json=foreignTableName,proto3" json:"foreign_table_name,omitempty"`
	ForeignColumnName   string                 `protobuf:"bytes,5,opt,name=foreign_column_name,json=foreignColumnName,proto3" json:"foreign_column_name,omitempty"`
	ConstraintName      string                 `protobuf:"bytes,6,opt,name=constraint_name,json=constraintName,proto3" json:"constraint_name,omitempty"`
	OnUpdate            string                 `protobuf:"bytes,7,opt,name=on_update,json=onUpdate,proto3" json:"on_update,omitempty"`
	OnDelete            string                 `protobuf:"bytes,8,opt,name=on_delete,json=onDelete,proto3" json:"on_delete,omitempty"`
	Validation          string                 `protobuf:"bytes,9,opt,name=validation,proto3" json:"validation,omitempty"`
	IsInitiallyDeferred bool                   `protobuf:"varint,10,opt,name=is_initially_deferred,json=isInitiallyDeferred,proto3" json:"is_initially_deferred,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PostgreSQLForeignKey) Reset() {
	*x = PostgreSQLForeignKey{}
	mi := &file_postgres_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLForeignKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLForeignKey) ProtoMessage() {}

func (x *PostgreSQLForeignKey) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLForeignKey.ProtoReflect.Descriptor instead.
func (*PostgreSQLForeignKey) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{5}
}

func (x *PostgreSQLForeignKey) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetForeignTableName() string {
	if x != nil {
		return x.ForeignTableName
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetForeignColumnName() string {
	if x != nil {
		return x.ForeignColumnName
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetConstraintName() string {
	if x != nil {
		return x.ConstraintName
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetOnUpdate() string {
	if x != nil {
		return x.OnUpdate
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetOnDelete() string {
	if x != nil {
		return x.OnDelete
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *PostgreSQLForeignKey) GetIsInitiallyDeferred() bool {
	if x != nil {
		return x.IsInitiallyDeferred
	}
	return false
}

type PostgreSQLIndex struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SchemaName     string                 `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName      string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	IndexName      string                 `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	ColumnNames    []string               `protobuf:"bytes,4,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	Algorithm      string                 `protobuf:"bytes,5,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Definition     string                 `protobuf:"bytes,6,opt,name=definition,proto3" json:"definition,omitempty"`
	ConstraintType string                 `protobuf:"bytes,7,opt,name=constraint_type,json=constraintType,proto3" json:"constraint_type,omitempty"`
	IsUnique       bool                   `protobuf:"varint,8,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	IsPrimary      bool                   `protobuf:"varint,9,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsPartial      bool                   `protobuf:"varint,10,opt,name=is_partial,json=isPartial,proto3" json:"is_partial,omitempty"`
	Condition      string                 `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	Include        string                 `protobuf:"bytes,12,opt,name=include,proto3" json:"include,omitempty"`
	Comment        string                 `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PostgreSQLIndex) Reset() {
	*x = PostgreSQLIndex{}
	mi := &file_postgres_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLIndex) ProtoMessage() {}

func (x *PostgreSQLIndex) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLIndex.ProtoReflect.Descriptor instead.
func (*PostgreSQLIndex) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{6}
}

func (x *PostgreSQLIndex) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLIndex) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLIndex) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *PostgreSQLIndex) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *PostgreSQLIndex) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *PostgreSQLIndex) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgreSQLIndex) GetConstraintType() string {
	if x != nil {
		return x.ConstraintType
	}
	return ""
}

func (x *PostgreSQLIndex) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *PostgreSQLIndex) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *PostgreSQLIndex) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

func (x *PostgreSQLIndex) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *PostgreSQLIndex) GetInclude() string {
	if x != nil {
		return x.Include
	}
	return ""
}

func (x *PostgreSQLIndex) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type PostgreSQLFunction struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	SchemaName    string                         `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	FunctionName  string                         `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	ReturnType    string                         `protobuf:"bytes,3,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	Definition    string                         `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	Arguments     []*PostgreSQLFunction_Argument `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Language      *string                        `protobuf:"bytes,6,opt,name=language,proto3,oneof" json:"language,omitempty"`
	Comment       *string                        `protobuf:"bytes,7,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLFunction) Reset() {
	*x = PostgreSQLFunction{}
	mi := &file_postgres_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLFunction) ProtoMessage() {}

func (x *PostgreSQLFunction) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLFunction.ProtoReflect.Descriptor instead.
func (*PostgreSQLFunction) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{7}
}

func (x *PostgreSQLFunction) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLFunction) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *PostgreSQLFunction) GetReturnType() string {
	if x != nil {
		return x.ReturnType
	}
	return ""
}

func (x *PostgreSQLFunction) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgreSQLFunction) GetArguments() []*PostgreSQLFunction_Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *PostgreSQLFunction) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *PostgreSQLFunction) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgreSQLProcedure struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	SchemaName    string                          `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	ProcedureName string                          `protobuf:"bytes,2,opt,name=procedure_name,json=procedureName,proto3" json:"procedure_name,omitempty"`
	Definition    string                          `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Arguments     []*PostgreSQLProcedure_Argument `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Language      *string                         `protobuf:"bytes,5,opt,name=language,proto3,oneof" json:"language,omitempty"`
	Comment       *string                         `protobuf:"bytes,6,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLProcedure) Reset() {
	*x = PostgreSQLProcedure{}
	mi := &file_postgres_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLProcedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLProcedure) ProtoMessage() {}

func (x *PostgreSQLProcedure) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLProcedure.ProtoReflect.Descriptor instead.
func (*PostgreSQLProcedure) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{8}
}

func (x *PostgreSQLProcedure) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLProcedure) GetProcedureName() string {
	if x != nil {
		return x.ProcedureName
	}
	return ""
}

func (x *PostgreSQLProcedure) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgreSQLProcedure) GetArguments() []*PostgreSQLProcedure_Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *PostgreSQLProcedure) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *PostgreSQLProcedure) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgreSQLTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemaName    string                 `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName     string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TriggerName   string                 `protobuf:"bytes,3,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	Event         string                 `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	When          string                 `protobuf:"bytes,5,opt,name=when,proto3" json:"when,omitempty"`
	Statement     string                 `protobuf:"bytes,6,opt,name=statement,proto3" json:"statement,omitempty"`
	Condition     *string                `protobuf:"bytes,7,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	Comment       *string                `protobuf:"bytes,8,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLTrigger) Reset() {
	*x = PostgreSQLTrigger{}
	mi := &file_postgres_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLTrigger) ProtoMessage() {}

func (x *PostgreSQLTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLTrigger.ProtoReflect.Descriptor instead.
func (*PostgreSQLTrigger) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{9}
}

func (x *PostgreSQLTrigger) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLTrigger) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLTrigger) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *PostgreSQLTrigger) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *PostgreSQLTrigger) GetWhen() string {
	if x != nil {
		return x.When
	}
	return ""
}

func (x *PostgreSQLTrigger) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *PostgreSQLTrigger) GetCondition() string {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return ""
}

func (x *PostgreSQLTrigger) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgreSQLView struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemaName    string                 `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName     string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Definition    string                 `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Columns       []*PostgreSQLColumn    `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	IsUpdatable   bool                   `protobuf:"varint,5,opt,name=is_updatable,json=isUpdatable,proto3" json:"is_updatable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLView) Reset() {
	*x = PostgreSQLView{}
	mi := &file_postgres_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLView) ProtoMessage() {}

func (x *PostgreSQLView) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLView.ProtoReflect.Descriptor instead.
func (*PostgreSQLView) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{10}
}

func (x *PostgreSQLView) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLView) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLView) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgreSQLView) GetColumns() []*PostgreSQLColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PostgreSQLView) GetIsUpdatable() bool {
	if x != nil {
		return x.IsUpdatable
	}
	return false
}

type PostgreSQLMaterializedView struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemaName    string                 `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName     string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Definition    string                 `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Columns       []*PostgreSQLColumn    `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLMaterializedView) Reset() {
	*x = PostgreSQLMaterializedView{}
	mi := &file_postgres_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLMaterializedView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLMaterializedView) ProtoMessage() {}

func (x *PostgreSQLMaterializedView) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLMaterializedView.ProtoReflect.Descriptor instead.
func (*PostgreSQLMaterializedView) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{11}
}

func (x *PostgreSQLMaterializedView) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgreSQLMaterializedView) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgreSQLMaterializedView) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgreSQLMaterializedView) GetColumns() []*PostgreSQLColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type PostgreSQLServerInfo_Configuration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Category      *string                `protobuf:"bytes,2,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Value         *string                `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Unit          *string                `protobuf:"bytes,4,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	Description   *string                `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLServerInfo_Configuration) Reset() {
	*x = PostgreSQLServerInfo_Configuration{}
	mi := &file_postgres_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLServerInfo_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLServerInfo_Configuration) ProtoMessage() {}

func (x *PostgreSQLServerInfo_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLServerInfo_Configuration.ProtoReflect.Descriptor instead.
func (*PostgreSQLServerInfo_Configuration) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PostgreSQLServerInfo_Configuration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgreSQLServerInfo_Configuration) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *PostgreSQLServerInfo_Configuration) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PostgreSQLServerInfo_Configuration) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *PostgreSQLServerInfo_Configuration) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type PostgreSQLFunction_Argument struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsVariadic    bool                   `protobuf:"varint,3,opt,name=is_variadic,json=isVariadic,proto3" json:"is_variadic,omitempty"`
	IsNullable    bool                   `protobuf:"varint,4,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	DefaultValue  string                 `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLFunction_Argument) Reset() {
	*x = PostgreSQLFunction_Argument{}
	mi := &file_postgres_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLFunction_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLFunction_Argument) ProtoMessage() {}

func (x *PostgreSQLFunction_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLFunction_Argument.ProtoReflect.Descriptor instead.
func (*PostgreSQLFunction_Argument) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PostgreSQLFunction_Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgreSQLFunction_Argument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PostgreSQLFunction_Argument) GetIsVariadic() bool {
	if x != nil {
		return x.IsVariadic
	}
	return false
}

func (x *PostgreSQLFunction_Argument) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *PostgreSQLFunction_Argument) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

type PostgreSQLProcedure_Argument struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsVariadic    bool                   `protobuf:"varint,3,opt,name=is_variadic,json=isVariadic,proto3" json:"is_variadic,omitempty"`
	IsNullable    bool                   `protobuf:"varint,4,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	DefaultValue  string                 `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgreSQLProcedure_Argument) Reset() {
	*x = PostgreSQLProcedure_Argument{}
	mi := &file_postgres_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgreSQLProcedure_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgreSQLProcedure_Argument) ProtoMessage() {}

func (x *PostgreSQLProcedure_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgreSQLProcedure_Argument.ProtoReflect.Descriptor instead.
func (*PostgreSQLProcedure_Argument) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PostgreSQLProcedure_Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgreSQLProcedure_Argument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PostgreSQLProcedure_Argument) GetIsVariadic() bool {
	if x != nil {
		return x.IsVariadic
	}
	return false
}

func (x *PostgreSQLProcedure_Argument) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *PostgreSQLProcedure_Argument) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

var File_postgres_proto protoreflect.FileDescriptor

var file_postgres_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x22, 0x91, 0x03, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53,
	0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xcf, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51,
	0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x22, 0xe3, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79,
	0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x79, 0x73,
	0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53,
	0x51, 0x4c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x5c, 0x0a,
	0x12, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x73, 0x73,
	0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x03, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79,
	0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x53, 0x51, 0x4c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xe5, 0x04, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x73, 0x73,
	0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x14, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x44,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xa7, 0x03, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xde, 0x03, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51,
	0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x99, 0x01,
	0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x64, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51,
	0x4c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x53, 0x51, 0x4c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x99, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x64, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x53, 0x51, 0x4c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53,
	0x51, 0x4c, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73,
	0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e,
	0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x79, 0x73, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x71, 0x6c,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_postgres_proto_rawDescOnce sync.Once
	file_postgres_proto_rawDescData = file_postgres_proto_rawDesc
)

func file_postgres_proto_rawDescGZIP() []byte {
	file_postgres_proto_rawDescOnce.Do(func() {
		file_postgres_proto_rawDescData = protoimpl.X.CompressGZIP(file_postgres_proto_rawDescData)
	})
	return file_postgres_proto_rawDescData
}

var file_postgres_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_postgres_proto_goTypes = []any{
	(*PostgreSQLServerInfo)(nil),               // 0: syss.sqlschema.v1.PostgreSQLServerInfo
	(*PostgreSQLDatabase)(nil),                 // 1: syss.sqlschema.v1.PostgreSQLDatabase
	(*PostgreSQLSchema)(nil),                   // 2: syss.sqlschema.v1.PostgreSQLSchema
	(*PostgreSQLTable)(nil),                    // 3: syss.sqlschema.v1.PostgreSQLTable
	(*PostgreSQLColumn)(nil),                   // 4: syss.sqlschema.v1.PostgreSQLColumn
	(*PostgreSQLForeignKey)(nil),               // 5: syss.sqlschema.v1.PostgreSQLForeignKey
	(*PostgreSQLIndex)(nil),                    // 6: syss.sqlschema.v1.PostgreSQLIndex
	(*PostgreSQLFunction)(nil),                 // 7: syss.sqlschema.v1.PostgreSQLFunction
	(*PostgreSQLProcedure)(nil),                // 8: syss.sqlschema.v1.PostgreSQLProcedure
	(*PostgreSQLTrigger)(nil),                  // 9: syss.sqlschema.v1.PostgreSQLTrigger
	(*PostgreSQLView)(nil),                     // 10: syss.sqlschema.v1.PostgreSQLView
	(*PostgreSQLMaterializedView)(nil),         // 11: syss.sqlschema.v1.PostgreSQLMaterializedView
	(*PostgreSQLServerInfo_Configuration)(nil), // 12: syss.sqlschema.v1.PostgreSQLServerInfo.Configuration
	(*PostgreSQLFunction_Argument)(nil),        // 13: syss.sqlschema.v1.PostgreSQLFunction.Argument
	(*PostgreSQLProcedure_Argument)(nil),       // 14: syss.sqlschema.v1.PostgreSQLProcedure.Argument
}
var file_postgres_proto_depIdxs = []int32{
	12, // 0: syss.sqlschema.v1.PostgreSQLServerInfo.configurations:type_name -> syss.sqlschema.v1.PostgreSQLServerInfo.Configuration
	2,  // 1: syss.sqlschema.v1.PostgreSQLDatabase.schemas:type_name -> syss.sqlschema.v1.PostgreSQLSchema
	3,  // 2: syss.sqlschema.v1.PostgreSQLSchema.tables:type_name -> syss.sqlschema.v1.PostgreSQLTable
	7,  // 3: syss.sqlschema.v1.PostgreSQLSchema.functions:type_name -> syss.sqlschema.v1.PostgreSQLFunction
	8,  // 4: syss.sqlschema.v1.PostgreSQLSchema.procedures:type_name -> syss.sqlschema.v1.PostgreSQLProcedure
	10, // 5: syss.sqlschema.v1.PostgreSQLSchema.views:type_name -> syss.sqlschema.v1.PostgreSQLView
	11, // 6: syss.sqlschema.v1.PostgreSQLSchema.materialized_views:type_name -> syss.sqlschema.v1.PostgreSQLMaterializedView
	4,  // 7: syss.sqlschema.v1.PostgreSQLTable.columns:type_name -> syss.sqlschema.v1.PostgreSQLColumn
	5,  // 8: syss.sqlschema.v1.PostgreSQLTable.foreign_keys:type_name -> syss.sqlschema.v1.PostgreSQLForeignKey
	6,  // 9: syss.sqlschema.v1.PostgreSQLTable.indexes:type_name -> syss.sqlschema.v1.PostgreSQLIndex
	9,  // 10: syss.sqlschema.v1.PostgreSQLTable.triggers:type_name -> syss.sqlschema.v1.PostgreSQLTrigger
	5,  // 11: syss.sqlschema.v1.PostgreSQLColumn.foreign_keys:type_name -> syss.sqlschema.v1.PostgreSQLForeignKey
	6,  // 12: syss.sqlschema.v1.PostgreSQLColumn.indexes:type_name -> syss.sqlschema.v1.PostgreSQLIndex
	13, // 13: syss.sqlschema.v1.PostgreSQLFunction.arguments:type_name -> syss.sqlschema.v1.PostgreSQLFunction.Argument
	14, // 14: syss.sqlschema.v1.PostgreSQLProcedure.arguments:type_name -> syss.sqlschema.v1.PostgreSQLProcedure.Argument
	4,  // 15: syss.sqlschema.v1.PostgreSQLView.columns:type_name -> syss.sqlschema.v1.PostgreSQLColumn
	4,  // 16: syss.sqlschema.v1.PostgreSQLMaterializedView.columns:type_name -> syss.sqlschema.v1.PostgreSQLColumn
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_postgres_proto_init() }
func file_postgres_proto_init() {
	if File_postgres_proto != nil {
		return
	}
	file_postgres_proto_msgTypes[2].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[3].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[4].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[7].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[8].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[9].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_postgres_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_postgres_proto_goTypes,
		DependencyIndexes: file_postgres_proto_depIdxs,
		MessageInfos:      file_postgres_proto_msgTypes,
	}.Build()
	File_postgres_proto = out.File
	file_postgres_proto_rawDesc = nil
	file_postgres_proto_goTypes = nil
	file_postgres_proto_depIdxs = nil
}
