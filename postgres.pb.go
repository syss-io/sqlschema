// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: postgres.proto

package sql_schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostgresServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionFull    string                              `protobuf:"bytes,1,opt,name=version_full,json=versionFull,proto3" json:"version_full,omitempty"`
	VersionNumber  int32                               `protobuf:"varint,2,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	Configurations []*PostgresServerInfo_Configuration `protobuf:"bytes,3,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (x *PostgresServerInfo) Reset() {
	*x = PostgresServerInfo{}
	mi := &file_postgres_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresServerInfo) ProtoMessage() {}

func (x *PostgresServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresServerInfo.ProtoReflect.Descriptor instead.
func (*PostgresServerInfo) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{0}
}

func (x *PostgresServerInfo) GetVersionFull() string {
	if x != nil {
		return x.VersionFull
	}
	return ""
}

func (x *PostgresServerInfo) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

func (x *PostgresServerInfo) GetConfigurations() []*PostgresServerInfo_Configuration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type PostgresDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schemas []*PostgresSchemaDefinition `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (x *PostgresDatabase) Reset() {
	*x = PostgresDatabase{}
	mi := &file_postgres_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresDatabase) ProtoMessage() {}

func (x *PostgresDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresDatabase.ProtoReflect.Descriptor instead.
func (*PostgresDatabase) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{1}
}

func (x *PostgresDatabase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresDatabase) GetSchemas() []*PostgresSchemaDefinition {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type PostgresSchemaDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName        string                                `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	DatabaseName      string                                `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	Tables            []*PostgresTableDefinition            `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
	Functions         []*PostgresFunctionDefinition         `protobuf:"bytes,4,rep,name=functions,proto3" json:"functions,omitempty"`
	Procedures        []*PostgresProcedureDefinition        `protobuf:"bytes,5,rep,name=procedures,proto3" json:"procedures,omitempty"`
	Views             []*PostgresViewDefinition             `protobuf:"bytes,6,rep,name=views,proto3" json:"views,omitempty"`
	MaterializedViews []*PostgresMaterializedViewDefinition `protobuf:"bytes,7,rep,name=materialized_views,json=materializedViews,proto3" json:"materialized_views,omitempty"`
	Comment           *string                               `protobuf:"bytes,8,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *PostgresSchemaDefinition) Reset() {
	*x = PostgresSchemaDefinition{}
	mi := &file_postgres_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSchemaDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSchemaDefinition) ProtoMessage() {}

func (x *PostgresSchemaDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSchemaDefinition.ProtoReflect.Descriptor instead.
func (*PostgresSchemaDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{2}
}

func (x *PostgresSchemaDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresSchemaDefinition) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PostgresSchemaDefinition) GetTables() []*PostgresTableDefinition {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *PostgresSchemaDefinition) GetFunctions() []*PostgresFunctionDefinition {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *PostgresSchemaDefinition) GetProcedures() []*PostgresProcedureDefinition {
	if x != nil {
		return x.Procedures
	}
	return nil
}

func (x *PostgresSchemaDefinition) GetViews() []*PostgresViewDefinition {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *PostgresSchemaDefinition) GetMaterializedViews() []*PostgresMaterializedViewDefinition {
	if x != nil {
		return x.MaterializedViews
	}
	return nil
}

func (x *PostgresSchemaDefinition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgresTableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName  string                          `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName   string                          `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Columns     []*PostgresColumnDefinition     `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	ForeignKeys []*PostgresForeignKeyDefinition `protobuf:"bytes,4,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	Indexes     []*PostgresIndexDefinition      `protobuf:"bytes,5,rep,name=indexes,proto3" json:"indexes,omitempty"`
	Triggers    []*PostgresTriggerDefinition    `protobuf:"bytes,6,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Comment     *string                         `protobuf:"bytes,7,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *PostgresTableDefinition) Reset() {
	*x = PostgresTableDefinition{}
	mi := &file_postgres_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresTableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresTableDefinition) ProtoMessage() {}

func (x *PostgresTableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresTableDefinition.ProtoReflect.Descriptor instead.
func (*PostgresTableDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{3}
}

func (x *PostgresTableDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresTableDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresTableDefinition) GetColumns() []*PostgresColumnDefinition {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PostgresTableDefinition) GetForeignKeys() []*PostgresForeignKeyDefinition {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *PostgresTableDefinition) GetIndexes() []*PostgresIndexDefinition {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *PostgresTableDefinition) GetTriggers() []*PostgresTriggerDefinition {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *PostgresTableDefinition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgresColumnDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName             string                          `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName              string                          `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	ColumnName             string                          `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	DataType               string                          `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	IsNullable             bool                            `protobuf:"varint,5,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	DefaultValue           *string                         `protobuf:"bytes,6,opt,name=default_value,json=defaultValue,proto3,oneof" json:"default_value,omitempty"`
	IsPrimary              bool                            `protobuf:"varint,7,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsUnique               bool                            `protobuf:"varint,8,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	IsAutoincrement        bool                            `protobuf:"varint,9,opt,name=is_autoincrement,json=isAutoincrement,proto3" json:"is_autoincrement,omitempty"`
	CharacterMaximumLength *int64                          `protobuf:"varint,10,opt,name=character_maximum_length,json=characterMaximumLength,proto3,oneof" json:"character_maximum_length,omitempty"`
	Comment                *string                         `protobuf:"bytes,11,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	ForeignKeys            []*PostgresForeignKeyDefinition `protobuf:"bytes,12,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	Indexes                []*PostgresIndexDefinition      `protobuf:"bytes,13,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *PostgresColumnDefinition) Reset() {
	*x = PostgresColumnDefinition{}
	mi := &file_postgres_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresColumnDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresColumnDefinition) ProtoMessage() {}

func (x *PostgresColumnDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresColumnDefinition.ProtoReflect.Descriptor instead.
func (*PostgresColumnDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{4}
}

func (x *PostgresColumnDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresColumnDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresColumnDefinition) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *PostgresColumnDefinition) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *PostgresColumnDefinition) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *PostgresColumnDefinition) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *PostgresColumnDefinition) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *PostgresColumnDefinition) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *PostgresColumnDefinition) GetIsAutoincrement() bool {
	if x != nil {
		return x.IsAutoincrement
	}
	return false
}

func (x *PostgresColumnDefinition) GetCharacterMaximumLength() int64 {
	if x != nil && x.CharacterMaximumLength != nil {
		return *x.CharacterMaximumLength
	}
	return 0
}

func (x *PostgresColumnDefinition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *PostgresColumnDefinition) GetForeignKeys() []*PostgresForeignKeyDefinition {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *PostgresColumnDefinition) GetIndexes() []*PostgresIndexDefinition {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type PostgresForeignKeyDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName          string `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName           string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	ColumnName          string `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ForeignTableName    string `protobuf:"bytes,4,opt,name=foreign_table_name,json=foreignTableName,proto3" json:"foreign_table_name,omitempty"`
	ForeignColumnName   string `protobuf:"bytes,5,opt,name=foreign_column_name,json=foreignColumnName,proto3" json:"foreign_column_name,omitempty"`
	ConstraintName      string `protobuf:"bytes,6,opt,name=constraint_name,json=constraintName,proto3" json:"constraint_name,omitempty"`
	OnUpdate            string `protobuf:"bytes,7,opt,name=on_update,json=onUpdate,proto3" json:"on_update,omitempty"`
	OnDelete            string `protobuf:"bytes,8,opt,name=on_delete,json=onDelete,proto3" json:"on_delete,omitempty"`
	Validation          string `protobuf:"bytes,9,opt,name=validation,proto3" json:"validation,omitempty"`
	IsInitiallyDeferred bool   `protobuf:"varint,10,opt,name=is_initially_deferred,json=isInitiallyDeferred,proto3" json:"is_initially_deferred,omitempty"`
}

func (x *PostgresForeignKeyDefinition) Reset() {
	*x = PostgresForeignKeyDefinition{}
	mi := &file_postgres_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresForeignKeyDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresForeignKeyDefinition) ProtoMessage() {}

func (x *PostgresForeignKeyDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresForeignKeyDefinition.ProtoReflect.Descriptor instead.
func (*PostgresForeignKeyDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{5}
}

func (x *PostgresForeignKeyDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetForeignTableName() string {
	if x != nil {
		return x.ForeignTableName
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetForeignColumnName() string {
	if x != nil {
		return x.ForeignColumnName
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetConstraintName() string {
	if x != nil {
		return x.ConstraintName
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetOnUpdate() string {
	if x != nil {
		return x.OnUpdate
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetOnDelete() string {
	if x != nil {
		return x.OnDelete
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetValidation() string {
	if x != nil {
		return x.Validation
	}
	return ""
}

func (x *PostgresForeignKeyDefinition) GetIsInitiallyDeferred() bool {
	if x != nil {
		return x.IsInitiallyDeferred
	}
	return false
}

type PostgresIndexDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName     string   `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName      string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	IndexName      string   `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	ColumnNames    []string `protobuf:"bytes,4,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	Algorithm      string   `protobuf:"bytes,5,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Definition     string   `protobuf:"bytes,6,opt,name=definition,proto3" json:"definition,omitempty"`
	ConstraintType string   `protobuf:"bytes,7,opt,name=constraint_type,json=constraintType,proto3" json:"constraint_type,omitempty"`
	IsUnique       bool     `protobuf:"varint,8,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	IsPrimary      bool     `protobuf:"varint,9,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsPartial      bool     `protobuf:"varint,10,opt,name=is_partial,json=isPartial,proto3" json:"is_partial,omitempty"`
	Condition      string   `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	Include        string   `protobuf:"bytes,12,opt,name=include,proto3" json:"include,omitempty"`
	Comment        string   `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *PostgresIndexDefinition) Reset() {
	*x = PostgresIndexDefinition{}
	mi := &file_postgres_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresIndexDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresIndexDefinition) ProtoMessage() {}

func (x *PostgresIndexDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresIndexDefinition.ProtoReflect.Descriptor instead.
func (*PostgresIndexDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{6}
}

func (x *PostgresIndexDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresIndexDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresIndexDefinition) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *PostgresIndexDefinition) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *PostgresIndexDefinition) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *PostgresIndexDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgresIndexDefinition) GetConstraintType() string {
	if x != nil {
		return x.ConstraintType
	}
	return ""
}

func (x *PostgresIndexDefinition) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *PostgresIndexDefinition) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *PostgresIndexDefinition) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

func (x *PostgresIndexDefinition) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *PostgresIndexDefinition) GetInclude() string {
	if x != nil {
		return x.Include
	}
	return ""
}

func (x *PostgresIndexDefinition) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type PostgresFunctionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName   string                                 `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	FunctionName string                                 `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	ReturnType   string                                 `protobuf:"bytes,3,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	Definition   string                                 `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	Arguments    []*PostgresFunctionDefinition_Argument `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Language     *string                                `protobuf:"bytes,6,opt,name=language,proto3,oneof" json:"language,omitempty"`
	Comment      *string                                `protobuf:"bytes,7,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *PostgresFunctionDefinition) Reset() {
	*x = PostgresFunctionDefinition{}
	mi := &file_postgres_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresFunctionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresFunctionDefinition) ProtoMessage() {}

func (x *PostgresFunctionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresFunctionDefinition.ProtoReflect.Descriptor instead.
func (*PostgresFunctionDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{7}
}

func (x *PostgresFunctionDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresFunctionDefinition) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *PostgresFunctionDefinition) GetReturnType() string {
	if x != nil {
		return x.ReturnType
	}
	return ""
}

func (x *PostgresFunctionDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgresFunctionDefinition) GetArguments() []*PostgresFunctionDefinition_Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *PostgresFunctionDefinition) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *PostgresFunctionDefinition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgresProcedureDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName    string                                  `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	ProcedureName string                                  `protobuf:"bytes,2,opt,name=procedure_name,json=procedureName,proto3" json:"procedure_name,omitempty"`
	Definition    string                                  `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Arguments     []*PostgresProcedureDefinition_Argument `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Language      *string                                 `protobuf:"bytes,5,opt,name=language,proto3,oneof" json:"language,omitempty"`
	Comment       *string                                 `protobuf:"bytes,6,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *PostgresProcedureDefinition) Reset() {
	*x = PostgresProcedureDefinition{}
	mi := &file_postgres_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresProcedureDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresProcedureDefinition) ProtoMessage() {}

func (x *PostgresProcedureDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresProcedureDefinition.ProtoReflect.Descriptor instead.
func (*PostgresProcedureDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{8}
}

func (x *PostgresProcedureDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresProcedureDefinition) GetProcedureName() string {
	if x != nil {
		return x.ProcedureName
	}
	return ""
}

func (x *PostgresProcedureDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgresProcedureDefinition) GetArguments() []*PostgresProcedureDefinition_Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *PostgresProcedureDefinition) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *PostgresProcedureDefinition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgresTriggerDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName  string  `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName   string  `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TriggerName string  `protobuf:"bytes,3,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	Event       string  `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	When        string  `protobuf:"bytes,5,opt,name=when,proto3" json:"when,omitempty"`
	Statement   string  `protobuf:"bytes,6,opt,name=statement,proto3" json:"statement,omitempty"`
	Condition   *string `protobuf:"bytes,7,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	Comment     *string `protobuf:"bytes,8,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
}

func (x *PostgresTriggerDefinition) Reset() {
	*x = PostgresTriggerDefinition{}
	mi := &file_postgres_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresTriggerDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresTriggerDefinition) ProtoMessage() {}

func (x *PostgresTriggerDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresTriggerDefinition.ProtoReflect.Descriptor instead.
func (*PostgresTriggerDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{9}
}

func (x *PostgresTriggerDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresTriggerDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresTriggerDefinition) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *PostgresTriggerDefinition) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *PostgresTriggerDefinition) GetWhen() string {
	if x != nil {
		return x.When
	}
	return ""
}

func (x *PostgresTriggerDefinition) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *PostgresTriggerDefinition) GetCondition() string {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return ""
}

func (x *PostgresTriggerDefinition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type PostgresViewDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName  string                      `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName   string                      `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Definition  string                      `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Columns     []*PostgresColumnDefinition `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	IsUpdatable bool                        `protobuf:"varint,5,opt,name=is_updatable,json=isUpdatable,proto3" json:"is_updatable,omitempty"`
}

func (x *PostgresViewDefinition) Reset() {
	*x = PostgresViewDefinition{}
	mi := &file_postgres_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresViewDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresViewDefinition) ProtoMessage() {}

func (x *PostgresViewDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresViewDefinition.ProtoReflect.Descriptor instead.
func (*PostgresViewDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{10}
}

func (x *PostgresViewDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresViewDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresViewDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgresViewDefinition) GetColumns() []*PostgresColumnDefinition {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PostgresViewDefinition) GetIsUpdatable() bool {
	if x != nil {
		return x.IsUpdatable
	}
	return false
}

type PostgresMaterializedViewDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaName string                      `protobuf:"bytes,1,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName  string                      `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Definition string                      `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
	Columns    []*PostgresColumnDefinition `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *PostgresMaterializedViewDefinition) Reset() {
	*x = PostgresMaterializedViewDefinition{}
	mi := &file_postgres_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresMaterializedViewDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresMaterializedViewDefinition) ProtoMessage() {}

func (x *PostgresMaterializedViewDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresMaterializedViewDefinition.ProtoReflect.Descriptor instead.
func (*PostgresMaterializedViewDefinition) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{11}
}

func (x *PostgresMaterializedViewDefinition) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PostgresMaterializedViewDefinition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PostgresMaterializedViewDefinition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *PostgresMaterializedViewDefinition) GetColumns() []*PostgresColumnDefinition {
	if x != nil {
		return x.Columns
	}
	return nil
}

type PostgresServerInfo_Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Category    string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Unit        string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PostgresServerInfo_Configuration) Reset() {
	*x = PostgresServerInfo_Configuration{}
	mi := &file_postgres_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresServerInfo_Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresServerInfo_Configuration) ProtoMessage() {}

func (x *PostgresServerInfo_Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresServerInfo_Configuration.ProtoReflect.Descriptor instead.
func (*PostgresServerInfo_Configuration) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PostgresServerInfo_Configuration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresServerInfo_Configuration) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *PostgresServerInfo_Configuration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PostgresServerInfo_Configuration) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PostgresServerInfo_Configuration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PostgresFunctionDefinition_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsVariadic   bool   `protobuf:"varint,3,opt,name=is_variadic,json=isVariadic,proto3" json:"is_variadic,omitempty"`
	IsNullable   bool   `protobuf:"varint,4,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	DefaultValue string `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *PostgresFunctionDefinition_Argument) Reset() {
	*x = PostgresFunctionDefinition_Argument{}
	mi := &file_postgres_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresFunctionDefinition_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresFunctionDefinition_Argument) ProtoMessage() {}

func (x *PostgresFunctionDefinition_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresFunctionDefinition_Argument.ProtoReflect.Descriptor instead.
func (*PostgresFunctionDefinition_Argument) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PostgresFunctionDefinition_Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresFunctionDefinition_Argument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PostgresFunctionDefinition_Argument) GetIsVariadic() bool {
	if x != nil {
		return x.IsVariadic
	}
	return false
}

func (x *PostgresFunctionDefinition_Argument) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *PostgresFunctionDefinition_Argument) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

type PostgresProcedureDefinition_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsVariadic   bool   `protobuf:"varint,3,opt,name=is_variadic,json=isVariadic,proto3" json:"is_variadic,omitempty"`
	IsNullable   bool   `protobuf:"varint,4,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	DefaultValue string `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *PostgresProcedureDefinition_Argument) Reset() {
	*x = PostgresProcedureDefinition_Argument{}
	mi := &file_postgres_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresProcedureDefinition_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresProcedureDefinition_Argument) ProtoMessage() {}

func (x *PostgresProcedureDefinition_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_postgres_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresProcedureDefinition_Argument.ProtoReflect.Descriptor instead.
func (*PostgresProcedureDefinition_Argument) Descriptor() ([]byte, []int) {
	return file_postgres_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PostgresProcedureDefinition_Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresProcedureDefinition_Argument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PostgresProcedureDefinition_Argument) GetIsVariadic() bool {
	if x != nil {
		return x.IsVariadic
	}
	return false
}

func (x *PostgresProcedureDefinition_Argument) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *PostgresProcedureDefinition_Argument) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

var File_postgres_proto protoreflect.FileDescriptor

var file_postgres_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x22, 0xc9, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x8b, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x6d, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e,
	0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x93,
	0x04, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e,
	0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x64, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaf, 0x03, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfd, 0x04, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73,
	0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xaf, 0x03,
	0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xee, 0x03, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e,
	0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x99, 0x01, 0x0a, 0x08,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xd1, 0x03, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x79,
	0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x99, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x64, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x64, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71, 0x6c,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xcb,
	0x01, 0x0a, 0x22, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x73, 0x73, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x1f, 0x5a, 0x1d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x79, 0x73, 0x73, 0x2d,
	0x69, 0x6f, 0x2f, 0x73, 0x71, 0x6c, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_postgres_proto_rawDescOnce sync.Once
	file_postgres_proto_rawDescData = file_postgres_proto_rawDesc
)

func file_postgres_proto_rawDescGZIP() []byte {
	file_postgres_proto_rawDescOnce.Do(func() {
		file_postgres_proto_rawDescData = protoimpl.X.CompressGZIP(file_postgres_proto_rawDescData)
	})
	return file_postgres_proto_rawDescData
}

var file_postgres_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_postgres_proto_goTypes = []any{
	(*PostgresServerInfo)(nil),                   // 0: syss.sqlschema.v1.PostgresServerInfo
	(*PostgresDatabase)(nil),                     // 1: syss.sqlschema.v1.PostgresDatabase
	(*PostgresSchemaDefinition)(nil),             // 2: syss.sqlschema.v1.PostgresSchemaDefinition
	(*PostgresTableDefinition)(nil),              // 3: syss.sqlschema.v1.PostgresTableDefinition
	(*PostgresColumnDefinition)(nil),             // 4: syss.sqlschema.v1.PostgresColumnDefinition
	(*PostgresForeignKeyDefinition)(nil),         // 5: syss.sqlschema.v1.PostgresForeignKeyDefinition
	(*PostgresIndexDefinition)(nil),              // 6: syss.sqlschema.v1.PostgresIndexDefinition
	(*PostgresFunctionDefinition)(nil),           // 7: syss.sqlschema.v1.PostgresFunctionDefinition
	(*PostgresProcedureDefinition)(nil),          // 8: syss.sqlschema.v1.PostgresProcedureDefinition
	(*PostgresTriggerDefinition)(nil),            // 9: syss.sqlschema.v1.PostgresTriggerDefinition
	(*PostgresViewDefinition)(nil),               // 10: syss.sqlschema.v1.PostgresViewDefinition
	(*PostgresMaterializedViewDefinition)(nil),   // 11: syss.sqlschema.v1.PostgresMaterializedViewDefinition
	(*PostgresServerInfo_Configuration)(nil),     // 12: syss.sqlschema.v1.PostgresServerInfo.Configuration
	(*PostgresFunctionDefinition_Argument)(nil),  // 13: syss.sqlschema.v1.PostgresFunctionDefinition.Argument
	(*PostgresProcedureDefinition_Argument)(nil), // 14: syss.sqlschema.v1.PostgresProcedureDefinition.Argument
}
var file_postgres_proto_depIdxs = []int32{
	12, // 0: syss.sqlschema.v1.PostgresServerInfo.configurations:type_name -> syss.sqlschema.v1.PostgresServerInfo.Configuration
	2,  // 1: syss.sqlschema.v1.PostgresDatabase.schemas:type_name -> syss.sqlschema.v1.PostgresSchemaDefinition
	3,  // 2: syss.sqlschema.v1.PostgresSchemaDefinition.tables:type_name -> syss.sqlschema.v1.PostgresTableDefinition
	7,  // 3: syss.sqlschema.v1.PostgresSchemaDefinition.functions:type_name -> syss.sqlschema.v1.PostgresFunctionDefinition
	8,  // 4: syss.sqlschema.v1.PostgresSchemaDefinition.procedures:type_name -> syss.sqlschema.v1.PostgresProcedureDefinition
	10, // 5: syss.sqlschema.v1.PostgresSchemaDefinition.views:type_name -> syss.sqlschema.v1.PostgresViewDefinition
	11, // 6: syss.sqlschema.v1.PostgresSchemaDefinition.materialized_views:type_name -> syss.sqlschema.v1.PostgresMaterializedViewDefinition
	4,  // 7: syss.sqlschema.v1.PostgresTableDefinition.columns:type_name -> syss.sqlschema.v1.PostgresColumnDefinition
	5,  // 8: syss.sqlschema.v1.PostgresTableDefinition.foreign_keys:type_name -> syss.sqlschema.v1.PostgresForeignKeyDefinition
	6,  // 9: syss.sqlschema.v1.PostgresTableDefinition.indexes:type_name -> syss.sqlschema.v1.PostgresIndexDefinition
	9,  // 10: syss.sqlschema.v1.PostgresTableDefinition.triggers:type_name -> syss.sqlschema.v1.PostgresTriggerDefinition
	5,  // 11: syss.sqlschema.v1.PostgresColumnDefinition.foreign_keys:type_name -> syss.sqlschema.v1.PostgresForeignKeyDefinition
	6,  // 12: syss.sqlschema.v1.PostgresColumnDefinition.indexes:type_name -> syss.sqlschema.v1.PostgresIndexDefinition
	13, // 13: syss.sqlschema.v1.PostgresFunctionDefinition.arguments:type_name -> syss.sqlschema.v1.PostgresFunctionDefinition.Argument
	14, // 14: syss.sqlschema.v1.PostgresProcedureDefinition.arguments:type_name -> syss.sqlschema.v1.PostgresProcedureDefinition.Argument
	4,  // 15: syss.sqlschema.v1.PostgresViewDefinition.columns:type_name -> syss.sqlschema.v1.PostgresColumnDefinition
	4,  // 16: syss.sqlschema.v1.PostgresMaterializedViewDefinition.columns:type_name -> syss.sqlschema.v1.PostgresColumnDefinition
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_postgres_proto_init() }
func file_postgres_proto_init() {
	if File_postgres_proto != nil {
		return
	}
	file_postgres_proto_msgTypes[2].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[3].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[4].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[7].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[8].OneofWrappers = []any{}
	file_postgres_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_postgres_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_postgres_proto_goTypes,
		DependencyIndexes: file_postgres_proto_depIdxs,
		MessageInfos:      file_postgres_proto_msgTypes,
	}.Build()
	File_postgres_proto = out.File
	file_postgres_proto_rawDesc = nil
	file_postgres_proto_goTypes = nil
	file_postgres_proto_depIdxs = nil
}
